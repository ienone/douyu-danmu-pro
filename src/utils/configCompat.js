/**
 * =================================================================================
 * ÊñóÈ±ºÂºπÂπïÂä©Êâã - ÈÖçÁΩÆÂÖºÂÆπÊÄßÂ∑•ÂÖ∑
 * ---------------------------------------------------------------------------------
 * Â∏ÆÂä©‰ª£Á†Å‰ªéÊóßÈÖçÁΩÆÁªìÊûÑËøÅÁßªÂà∞Êñ∞ÈÖçÁΩÆÁªìÊûÑÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
 * =================================================================================
 */

import { CONFIG, DEFAULT_SETTINGS } from './CONFIG.js';

/**
 * ÂÖºÂÆπÊÄßÈÖçÁΩÆÊò†Â∞Ñ - Â∞ÜÊóßÁöÑ CONFIG Â±ûÊÄßÊò†Â∞ÑÂà∞Êñ∞ÁöÑ DEFAULT_SETTINGS
 */
const LEGACY_CONFIG_MAPPING = {
    'MIN_SEARCH_LENGTH': 'minSearchLength',
    'MAX_SUGGESTIONS': 'maxSuggestions',
    'ANIMATION_DURATION': 'animationDuration',
    'POPUP_SHOW_DELAY': 'popupShowDelay',
    'POPUP_HIDE_DELAY': 'popupHideDelay'
};

/**
 * Ëé∑ÂèñÈÖçÁΩÆÂÄº - ÂÖºÂÆπÊóßÁâàÊú¨ÂºïÁî®
 * @param {string} key - ÈÖçÁΩÆÈîÆÂêç
 * @param {*} defaultValue - ÈªòËÆ§ÂÄº
 * @returns {*} ÈÖçÁΩÆÂÄº
 */
export function getConfigValue(key, defaultValue = null) {
    // È¶ñÂÖàÊ£ÄÊü•ÊòØÂê¶ÊòØ CONFIG ‰∏≠ÁöÑÂºÄÂèëËÄÖÈÖçÁΩÆ
    if (hasNestedProperty(CONFIG, key)) {
        return getNestedProperty(CONFIG, key);
    }
    
    // Ê£ÄÊü•ÊòØÂê¶ÊòØÈúÄË¶ÅÊò†Â∞ÑÁöÑÊóßÈÖçÁΩÆ
    if (LEGACY_CONFIG_MAPPING[key]) {
        const newKey = LEGACY_CONFIG_MAPPING[key];
        return DEFAULT_SETTINGS[newKey] || defaultValue;
    }
    
    // Áõ¥Êé•Ê£ÄÊü• DEFAULT_SETTINGS
    if (DEFAULT_SETTINGS.hasOwnProperty(key)) {
        return DEFAULT_SETTINGS[key];
    }
    
    return defaultValue;
}

/**
 * Ê£ÄÊü•ÂØπË±°ÊòØÂê¶ÊúâÂµåÂ•óÂ±ûÊÄß
 * @param {object} obj - ÂØπË±°
 * @param {string} path - Â±ûÊÄßË∑ØÂæÑÔºåÂ¶Ç 'UI.ANIMATION_DURATION'
 * @returns {boolean}
 */
function hasNestedProperty(obj, path) {
    const keys = path.split('.');
    let current = obj;
    
    for (const key of keys) {
        if (current && typeof current === 'object' && key in current) {
            current = current[key];
        } else {
            return false;
        }
    }
    
    return true;
}

/**
 * Ëé∑ÂèñÂµåÂ•óÂ±ûÊÄßÂÄº
 * @param {object} obj - ÂØπË±°
 * @param {string} path - Â±ûÊÄßË∑ØÂæÑ
 * @returns {*}
 */
function getNestedProperty(obj, path) {
    const keys = path.split('.');
    let current = obj;
    
    for (const key of keys) {
        current = current[key];
    }
    
    return current;
}

/**
 * ÂàõÂª∫ÂêàÂπ∂ÂêéÁöÑÈÖçÁΩÆÂØπË±° - Áî®‰∫é‰ª£Á†ÅËøÅÁßªÊúüÈó¥
 * @returns {object} ÂêàÂπ∂ÂêéÁöÑÈÖçÁΩÆ
 */
export function createMergedConfig() {
    return {
        ...CONFIG,
        ...DEFAULT_SETTINGS,
        // ‰øùÊåÅÊóßÁâàÊú¨ÂÖºÂÆπÊÄßÁöÑÊò†Â∞Ñ
        MIN_SEARCH_LENGTH: DEFAULT_SETTINGS.minSearchLength,
        MAX_SUGGESTIONS: DEFAULT_SETTINGS.maxSuggestions,
        ANIMATION_DURATION: DEFAULT_SETTINGS.animationDuration,
        POPUP_SHOW_DELAY: DEFAULT_SETTINGS.popupShowDelay,
        POPUP_HIDE_DELAY: DEFAULT_SETTINGS.popupHideDelay
    };
}

/**
 * È™åËØÅÈÖçÁΩÆÂÆåÊï¥ÊÄß
 * @returns {object} È™åËØÅÁªìÊûú
 */
export function validateConfig() {
    const issues = [];
    const warnings = [];
    
    // Ê£ÄÊü•ÂøÖÈúÄÁöÑÈÖçÁΩÆÈ°π
    const requiredConfigKeys = [
        'SCRIPT_PREFIX', 'DB_NAME', 'DB_VERSION', 'DB_STORE_NAME'
    ];
    
    for (const key of requiredConfigKeys) {
        if (!CONFIG[key]) {
            issues.push(`Missing required CONFIG key: ${key}`);
        }
    }
    
    // Ê£ÄÊü•ÂøÖÈúÄÁöÑÁî®Êà∑ËÆæÁΩÆ
    const requiredSettingKeys = [
        'minSearchLength', 'maxSuggestions', 'debounceDelay'
    ];
    
    for (const key of requiredSettingKeys) {
        if (DEFAULT_SETTINGS[key] === undefined) {
            issues.push(`Missing required DEFAULT_SETTINGS key: ${key}`);
        }
    }
    
    // Ê£ÄÊü•Á±ªÂûã
    if (typeof DEFAULT_SETTINGS.minSearchLength !== 'number') {
        issues.push('minSearchLength must be a number');
    }
    
    if (typeof DEFAULT_SETTINGS.maxSuggestions !== 'number') {
        issues.push('maxSuggestions must be a number');
    }
    
    return {
        isValid: issues.length === 0,
        issues,
        warnings
    };
}

/**
 * ÊâìÂç∞ÈÖçÁΩÆ‰ø°ÊÅØÔºàË∞ÉËØïÁî®Ôºâ
 */
export function printConfigInfo() {
    console.group('üîß Configuration Info');
    console.log('CONFIG keys:', Object.keys(CONFIG));
    console.log('DEFAULT_SETTINGS keys:', Object.keys(DEFAULT_SETTINGS));
    
    const validation = validateConfig();
    if (validation.isValid) {
        console.log('‚úÖ Configuration is valid');
    } else {
        console.warn('‚ùå Configuration issues:', validation.issues);
    }
    
    if (validation.warnings.length > 0) {
        console.warn('‚ö†Ô∏è Configuration warnings:', validation.warnings);
    }
    
    console.groupEnd();
}